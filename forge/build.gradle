plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

configurations {
    shadow
}

architectury {
    platformSetupLoomIde()
}

loom {
    useFabricMixin = true
    mixinConfigs = ["bountifulbaubles-forge.mixins.json"]
}

repositories {
    maven { url = "https://maven.theillusivec4.top/" }
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
//    modCompile "me.shedaniel:architectury:${rootProject.architectury_version}:forge"
    compileOnly "com.google.code.findbugs:jsr305:3.+"

//    modImplementation "top.theillusivec4.curios:curios-forge:${rootProject.curios_forge_version}"
//    modApi "top.theillusivec4.curios:curios-forge:${rootProject.curios_forge_version}:api"
    modCompile "top.theillusivec4.curios:curios-forge:${rootProject.curios_forge_version}"

//    // compile against the JEI API but do not include it at runtime
//    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
//    // at runtime, use the full JEI jar
//    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
	modCompile "mezz.jei:jei-${rootProject.jei_forge_version}"


    compileOnly(project(path: ":common")) {
        transitive = false
    }
    runtimeOnly(project(path: ":common", configuration: "transformDevelopmentForge")) {
        transitive = false
    }
    shadow(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadow]
    classifier "shadow"
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
    classifier "forge"
}